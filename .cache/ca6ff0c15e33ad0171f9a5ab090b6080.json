{"dependencies":[{"name":"/Users/carboncopy/Sites/Play/tippyjs/.babelrc","includedInParent":true,"mtime":1521377411200},{"name":"/Users/carboncopy/Sites/Play/tippyjs/package.json","includedInParent":true,"mtime":1521377420082},{"name":"hyperapp","loc":{"line":1,"column":18}},{"name":"../utils","loc":{"line":2,"column":22}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.view=void 0;var e=require(\"hyperapp\"),t=require(\"../utils\"),n=exports.view=function(n){n.state,n.actions;return(0,e.h)(\"section\",{class:\"section\",id:\"props\"},(0,e.h)(\"div\",{class:\"section__icon-wrapper\",innerHTML:(0,t.emoji)(\"üè∑Ô∏è\")}),(0,e.h)(\"div\",{class:\"section__heading-wrapper\"},(0,e.h)(\"a\",{class:\"section__heading\",href:\"#props\"},\"Props\")),(0,e.h)(\"p\",null,\"It's important to distinguish between the object returned from calling tippy() and a Tippy instance. When you call tippy(), it can create multiple tooltips (Tippy instances) at once.\"),(0,e.h)(\"p\",null,\"Tippy instances refer to individual tooltips, whereas the object returned from tippy() refers to the collection.\"),(0,e.h)(\"h3\",null,(0,e.h)(\"code\",null,\"tippy()\"),\" object\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"const tipObj = tippy('.btn')\"))),(0,e.h)(\"p\",null,(0,e.h)(\"code\",null,\"tipObj\"),\" is a plain object.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"{\\n  // selector that was supplied to tippy()\\n  selector: '.btn', \\n\\n  // default + instance options merged together\\n  options: { ... }, \\n\\n  // Array of all Tippy instances that were created\\n  tooltips: [Tippy, Tippy, Tippy, ...], \\n\\n  // Method to destroy all the tooltips that were created\\n  destroyAll() { }\\n}\"))),(0,e.h)(\"h3\",null,\"Tippy instances\"),(0,e.h)(\"p\",null,\"Stored on reference elements via the \",(0,e.h)(\"code\",null,\"_tippy\"),\" property, and inside the\",\" \",(0,e.h)(\"code\",null,\"tooltips\"),\" array of the \",(0,e.h)(\"code\",null,\"tippy()\"),\" object.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"tippy('.btn')\\nconst btn = document.querySelector('.btn')\\nconst tipInstance = btn._tippy\"))),(0,e.h)(\"p\",null,(0,e.h)(\"code\",null,\"tipInstance\"),\" is a Tippy instance.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"{\\n  // id of the Tippy instance (1 to Infinity)\\n  id: 1,\\n\\n  // Popper element that contains the tooltip\\n  popper: Element,\\n\\n  // Popper instance is not created until shown for the first time,\\n  // unless specified otherwise\\n  popperInstance: null,\\n\\n  // Reference element that is the trigger for the tooltip\\n  reference: Element,\\n\\n  // Array of objects containing the event + handler function of each trigger\\n  listeners: [{ ... }, { ... }, ...],\\n\\n  // Defaults + instance + attribute options merged together\\n  options: { ... },\\n\\n  // The state of the tooltip\\n  state: {\\n    // Has the instance been destroyed?\\n    destroyed: false,\\n    // Is the instance enabled?\\n    enabled: true,\\n    // Is the tooltip currently visible and not transitioning out?\\n    visible: false\\n  },\\n\\n  // title content of the tooltip (null if HTML)\\n  title: 'example'\\n}\"))),(0,e.h)(\"h3\",null,\"Shortcuts\"),(0,e.h)(\"p\",null,\"There are several shortcuts available for accessing the instance.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"// The popper element has the instance attached to it:\\npopper._tippy\\n// As does the reference element (as seen above):\\nreference._tippy\\n// The popper also has the reference directly attached:\\npopper._reference\"))))};"},"hash":"ab3ae98a9220af0ffe1f405264110c2d","cacheData":{"env":{}}}