{"dependencies":[{"name":"/Users/carboncopy/Sites/Play/tippyjs/.babelrc","includedInParent":true,"mtime":1521377411200},{"name":"/Users/carboncopy/Sites/Play/tippyjs/package.json","includedInParent":true,"mtime":1521377420082},{"name":"hyperapp","loc":{"line":1,"column":18}},{"name":"../utils","loc":{"line":2,"column":22}},{"name":"../../../src/js/tippy.js","loc":{"line":3,"column":18}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.view=exports.actions=void 0;var e=require(\"hyperapp\"),t=require(\"../utils\"),n=require(\"../../../src/js/tippy.js\"),o=i(n);function i(e){return e&&e.__esModule?e:{default:e}}var a=exports.actions={ajaxTippy:function(e){var t=e.parentNode.querySelector(\"#allOptions__ajax-template\"),n=t.textContent,i=(0,o.default)(e,{animation:\"shift-toward\",arrow:!0,html:t,onShow:function(e){var t=e.popper.querySelector(\".tippy-content\");i.loading||t.textContent!==n||(i.loading=!0,fetch(\"https://unsplash.it/200/?random\").then(function(e){return e.blob()}).then(function(e){t.innerHTML='<img width=\"200\" height=\"200\" src=\"'+URL.createObjectURL(e)+'\">',i.loading=!1}).catch(function(e){t.innerHTML=\"Loading failed\",i.loading=!1}))},onHidden:function(e){e.popper.querySelector(\".tippy-content\").innerHTML=n},popperOptions:{modifiers:{preventOverflow:{enabled:!1},hide:{enabled:!1}}}})}},l=exports.view=function(n){n.state;var o=n.actions;return(0,e.h)(\"section\",{class:\"section\",id:\"all-options\"},(0,e.h)(\"div\",{class:\"section__icon-wrapper\",innerHTML:(0,t.emoji)(\"üîÆ\")}),(0,e.h)(\"div\",{class:\"section__heading-wrapper\"},(0,e.h)(\"a\",{class:\"section__heading\",href:\"#all-options\"},\"All options\")),(0,e.h)(\"p\",null,\"Below is a list of all possible options you can supply to \",(0,e.h)(\"code\",null,\"tippy()\"),\". The values are the default ones used, with the different inputs being listed as a comment next to it.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"tippy(ref, {\\n  // Available v2.3+ - If true, HTML can be injected in the title attribute\\n  allowTitleHTML: true,\\n\\n  // If true, the tooltip's background fill will be animated (material effect)\\n  animateFill: true,\\n\\n  // The type of animation to use\\n  animation: 'shift-away', // 'shift-toward', 'fade', 'scale', 'perspective'\\n\\n  // Which element to append the tooltip to\\n  appendTo: document.body, // Element or Function that returns an element\\n\\n  // Whether to display the arrow. Disables the animateFill option\\n  arrow: true,\\n\\n  // Transforms the arrow element to make it larger, wider, skinnier, offset, etc.\\n  arrowTransform: '', // CSS syntax: 'scaleX(0.5)', 'scale(2)', 'translateX(5px)' etc.\\n\\n  // The type of arrow. 'sharp' is a triangle and 'round' is an SVG shape\\n  arrowType: 'sharp', // 'round'\\n\\n  // The tooltip's Popper instance is not created until it is shown for the first \\n  // time by default to increase performance\\n  createPopperInstanceOnInit: false,\\n\\n  // Delays showing/hiding a tooltip after a trigger event was fired, in ms\\n  delay: 0, // Number or Array [show, hide] e.g. [100, 500]\\n\\n  // How far the tooltip is from its reference element in pixels \\n  distance: 10,\\n\\n  // The transition duration\\n  duration: [350, 300], // Number or Array [show, hide]\\n\\n  // If true, whenever the title attribute on the reference changes, the tooltip \\n  // will automatically be updated\\n  dynamicTitle: false,\\n\\n  // If true, the tooltip will flip (change its placement) if there is not enough\\n  // room in the viewport to display it\\n  flip: true,\\n\\n  // The behavior of flipping. Use an array of placement strings, such as\\n  // ['right', 'bottom'] for the tooltip to flip to the bottom from the right\\n  // if there is not enough room\\n  flipBehavior: 'flip', // 'clockwise', 'counterclockwise', Array\\n\\n  // Whether to follow the user's mouse cursor or not\\n  followCursor: false,\\n\\n  // Upon clicking the reference element, the tooltip will hide.\\n  // Disable this if you are using it on an input for a focus trigger\\n  // Use 'persistent' to prevent the tooltip from closing on body OR reference\\n  // click\\n  hideOnClick: true, // false, 'persistent'\\n\\n  // Specifies that the tooltip should have HTML content injected into it.\\n  // A selector string indicates that a template should be cloned, whereas\\n  // a DOM element indicates it should be directly appended to the tooltip\\n  html: false, // 'selector', DOM Element\\n\\n  // Adds an inertial slingshot effect to the animation. TIP! Use a show duration\\n  // that is twice as long as hide, such as `duration: [600, 300]`\\n  inertia: false,\\n\\n  // If true, the tooltip becomes interactive and won't close when hovered over\\n  // or clicked\\n  interactive: false,\\n\\n  // Specifies the size in pixels of the invisible border around an interactive\\n  // tooltip that prevents it from closing. Useful to prevent the tooltip\\n  // from closing from clumsy mouse movements\\n  interactiveBorder: 2,\\n\\n  // Available v2.2+ - If false, the tooltip won't update its position (or flip) \\n  // when scrolling\\n  livePlacement: true,\\n\\n  // The maximum width of the tooltip. Add units such as px or rem\\n  // Avoid exceeding 300px due to mobile devices, or don't specify it at all\\n  maxWidth: '',\\n\\n  // If true, multiple tooltips can be on the page when triggered by clicks\\n  multiple: false,\\n\\n  // Offsets the tooltip popper in 2 dimensions. Similar to the distance option,\\n  // but applies to the parent popper element instead of the tooltip\\n  offset: 0, // '50, 20' = 50px x-axis offset, 20px y-axis offset\\n\\n  // Callback invoked when the tooltip fully transitions out\\n  onHidden(instance) {}, \\n\\n  // Callback invoked when the tooltip begins to transition out\\n  onHide(instance) {},\\n\\n  // Callback invoked when the tooltip begins to transition in\\n  onShow(instance) {},\\n\\n  // Callback invoked when the tooltip has fully transitioned in\\n  onShown(instance) {},\\n\\n  // If true, data-tippy-* attributes will be disabled for increased performance\\n  performance: false,\\n\\n  // The placement of the tooltip in relation to its reference\\n  placement: 'top', // 'bottom', 'left', 'right', 'top-start', 'top-end', etc.\\n\\n  // Popper.js options. Allows more control over tooltip positioning and behavior\\n  popperOptions: {}, \\n\\n  // The size of the tooltip\\n  size: 'regular', // 'small', 'large'\\n\\n  // If true, the tooltip's position will be updated on each animation frame so\\n  // the tooltip will stick to its reference element if it moves\\n  sticky: false,\\n\\n  // Available v2.1+ - CSS selector string used for event delegation\\n  target: null, // e.g. '.className'\\n\\n  // The theme, which is applied to the tooltip element as a class name, i.e.\\n  // 'dark-theme'. Add multiple themes by separating each by a space, such as\\n  // 'dark custom'\\n  theme: 'dark',\\n\\n  // Changes trigger behavior on touch devices. It will change it from a tap\\n  // to show and a tap off to hide, to a touch-and-hold to show, and a release\\n  // to hide\\n  touchHold: false,\\n\\n  // The events on the reference element which cause the tooltip to show\\n  trigger: 'mouseenter focus', // 'click', 'manual'\\n\\n  // Transition duration applied to the Popper element to transition between\\n  // position updates\\n  updateDuration: 350,\\n\\n  // The z-index of the popper\\n  zIndex: 9999\\n})\"))),(0,e.h)(\"h3\",null,\"Modifying the default options\"),(0,e.h)(\"p\",null,\"You can modify the options by accessing them via \",(0,e.h)(\"code\",null,\"tippy.defaults\"),\", which will apply to every future instance.\"),(0,e.h)(\"h3\",null,\"More control over tooltips\"),(0,e.h)(\"p\",null,\"Specify a \",(0,e.h)(\"code\",null,\"popperOptions\"),\" property with Popper.js options. View the\",\" \",(0,e.h)(\"a\",{target:\"_blank\",href:\"https://popper.js.org/popper-documentation.html\"},\"Popper.js documentation\"),\" \",\"to see all the options you can specify.\"),(0,e.h)(\"h3\",null,\"Callbacks \",(0,e.h)(\"span\",{class:\"section__emoji\",innerHTML:(0,t.emoji)(\"üîä\")})),(0,e.h)(\"p\",null,\"If you want things to occur during tooltips' show and hide events, you can specify callback functions in the options object.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"tippy(ref, {\\n  onShow(instance) {\\n    // When the tooltip begins to transition in\\n  },\\n  onShown(instance) {\\n    // When the tooltip has fully transitioned in\\n  },\\n  onHide(instance) {\\n    // When the tooltip begins to transition out\\n  },\\n  onHidden(instance) {\\n    // When the tooltip has fully transitioned out and is removed from the DOM\\n  },\\n  wait(show, event) {\\n    // Delays showing the tooltip until you manually invoke show()\\n  }\\n})\"))),(0,e.h)(\"h3\",null,\"AJAX tooltips \",(0,e.h)(\"span\",{class:\"section__emoji\",innerHTML:(0,t.emoji)(\"üåê\")})),(0,e.h)(\"p\",null,\"Callbacks allow you to do powerful things with tooltips. Here's an example of dynamic content which on show, fetches a new random image from the Unsplash API. Note: this requires a browser which supports the newer fetch API.\"),(0,e.h)(\"div\",{class:\"section__result\"},(0,e.h)(\"button\",{class:\"btn\",oncreate:o.ajaxTippy},\"Hover for a new image\"),(0,e.h)(\"div\",{id:\"allOptions__ajax-template\"},\"Loading...\")),(0,e.h)(\"a\",{href:\"https://codepen.io/anon/pen/GEmOQy\",target:\"_blank\"},\"CodePen Demo\"),(0,e.h)(\"h3\",null,\"Event delegation \",(0,e.h)(\"span\",{class:\"section__emoji\",innerHTML:(0,t.emoji)(\"üì°\")}),(0,e.h)(\"span\",{class:\"badge\"},\"v2.1\")),(0,e.h)(\"p\",null,\"Event delegation only requires minimal setup. Your setup should look similar to this, with a parent element wrapping the child elements you would like to give tooltips to:\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"html\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-html\"},'<div id=\"parent\" title=\"Shared title\">\\n  <div class=\"child\">Text</div>\\n  <div class=\"child\">Text</div>\\n  <div class=\"child\">Text</div>\\n  <div class=\"other\">Text</div>\\n</div>\\n'))),(0,e.h)(\"p\",null,\"Then, specify a CSS selector as the \",(0,e.h)(\"code\",null,\"target\"),\" that matches child elements which should receive tooltips\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"tippy('#parent', {\\n  target: '.child'\\n})\\n\"))),(0,e.h)(\"h4\",null,\"Note\"),(0,e.h)(\"p\",null,(0,e.h)(\"span\",{class:\"section__emoji\",innerHTML:(0,t.emoji)(\"‚ö†Ô∏è\")}),\"Avoid binding a Tippy instance to the body, as \",(0,e.h)(\"code\",null,\"mouseover / mouseoff\"),\" events will constantly fire as the cursor moves over the page. Instead, give it to the nearest possible parent element.\"),(0,e.h)(\"h4\",null,\"Destroying a delegate instance\"),(0,e.h)(\"p\",null,\"When you destroy a delegate's Tippy instance, it will destroy all target children's Tippy instances as well. To disable this behavior, pass \",(0,e.h)(\"code\",null,\"false\"),\" into the\",\" \",(0,e.h)(\"code\",null,\"destroy()\"),\" method.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"const parent = document.querySelector('#parent')\\ntippy(parent, { target: '.child' })\\n// Will not destroy any child target instances (if they had been created)\\nparent._tippy.destroy(false)\\n\"))),(0,e.h)(\"p\",null,\"If the target option is specified, the parent reference(s) become delegates and receive a\",(0,e.h)(\"code\",null,\"data-tippy-delegate\"),\" attribute instead of \",(0,e.h)(\"code\",null,\"data-tippy\"),\".\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"html\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-html\"},'<div id=\"parent\" title=\"Shared title\" data-tippy-delegate></div>'))),(0,e.h)(\"h3\",null,\"Tooltips inside a scrollable container\"),(0,e.h)(\"p\",null,\"Add the following options to make the tooltip not stay stuck within the viewport.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"tippy('.mySelector', {\\n  appendTo: document.querySelector('.mySelector').parentNode,\\n  popperOptions: {\\n    modifiers: {\\n      preventOverflow: {\\n        enabled: false\\n      },\\n      hide: {\\n        enabled: false\\n      }\\n    }\\n  }\\n})\\n\"))),(0,e.h)(\"h3\",null,\"Disabling tooltips on touch devices\"),(0,e.h)(\"p\",null,\"It can be tricky to determine touch devices accurately, especially considering the existence of hybrid devices (a mix of mouse and touch input). Simply detecting the user agent is not enough.\"),(0,e.h)(\"p\",null,\"A user can switch between either input type at any time which is why dynamic input detection is enabled. You can hook into Tippy's detection of user input changes by defining the following callback function:\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"tippy.browser.onUserInputChange = type => {\\n  console.log('The user is now using', type, 'as an input method')\\n}\\n\"))),(0,e.h)(\"p\",null,\"Whenever the user changes their input method, you can react to it inside the callback function. To disable tooltips for touch input but keep them enabled for mouse input, you can do the following:\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"const tip = tippy('[title]')\\n\\ntippy.browser.onUserInputChange = type => {\\n  const method = type === 'touch' ? 'disable' : 'enable'\\n  for (const tooltip of tip.tooltips) {\\n    tooltip[method]()\\n  }\\n}\\n\"))),(0,e.h)(\"h3\",null,\"Hiding tooltips on scroll\"),(0,e.h)(\"p\",null,\"Due to the way browsers fire \",(0,e.h)(\"code\",null,\"mouseleave\"),\" events, it may be desirable to hide tooltips and immediately disable their event listeners whenever scrolling occurs. This might also help reduce the intrusiveness of a tooltip on small screen touch devices, as it will begin hiding out of the way whenever they scroll, rather than whenever they tap somewhere else.\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"window.addEventListener('scroll', () => {\\n  for (const popper of document.querySelectorAll('.tippy-popper')) {\\n    const instance = popper._tippy\\n\\n    if (instance.state.visible) {\\n      instance.popperInstance.disableEventListeners()\\n      instance.hide()\\n    }\\n  }\\n})\\n\"))),(0,e.h)(\"h3\",null,\"Get all Tippy instances\"),(0,e.h)(\"p\",null,\"Getting all (non-destroyed) Tippy instances on the document can be done in one single line:\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"Array.from(document.querySelectorAll('[data-tippy]'), el => el._tippy)\"))),(0,e.h)(\"p\",null,\"This returns an array holding every current Tippy instance (excluding delegates). To include delegates, use this selector:\"),(0,e.h)(\"div\",{class:\"code-wrapper\",\"data-lang\":\"js\"},(0,e.h)(\"pre\",null,(0,e.h)(\"code\",{class:\"lang-js\"},\"'[data-tippy], [data-tippy-delegate]'\"))),(0,e.h)(\"p\",null,(0,e.h)(\"span\",{class:\"section__emoji\",innerHTML:(0,t.emoji)(\"‚ö†Ô∏è\")}),(0,e.h)(\"code\",null,\"Array.from\"),\" needs a polyfill for older browsers.\"))};"},"hash":"bd4a2288160426e6433418dbbe4ec38e","cacheData":{"env":{}}}